runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
shiny::shinyUI(
shinydashboard::dashboardPage(skin = "red",
######################################################################################
dashboardHeader(title = "Flamingo",
dropdownMenu(type = "tasks",
taskItem("Variables validated"),
menuItem("AA", tabName = "results", icon = icon("info-circle")))
# dropdownMenu(type = "notification",
#   messageItem(from = "x", message = "aaa"),
#   menuItem("AA", tabName = "results", icon = icon("dashboard")),
#   menuItem("BB", tabName = "Settings", icon = icon("dashboard")))
),
######################################################################################
dashboardSidebar(
h4("Fluid Properties Uncertainty Analysis"),
hr(),
sidebarMenu(selected = "_intro",
menuItem(HTML("<b>Analogs:</b>"), icon = icon("bullseye"),
menuSubItem("Analogs Data", tabName = "_analogs", icon = icon("puzzle-piece")),
menuSubItem("Cluster Analysis", tabName = "_cluster", icon = icon("object-group")),
menuSubItem("Heatmap", tabName = "_heatmap", icon = icon("map-o")),
menuSubItem("Statistics", tabName = "_stats", icon = icon("bars"))),
menuItem(HTML("<b>MonteCarlo:</b>"), icon = icon("bar-chart"),
menuSubItem("Settings", tabName = "_settings", icon = icon("cogs")),
menuSubItem("Definition", tabName = "_definition", icon = icon("delicious")),
menuSubItem("Input data", tabName = "_inputdata", icon = icon("table")),
# menuSubItem("P&T vs depth", tabName = "_depth", icon = icon("thermometer-half")),
menuSubItem("Simulation", tabName = "_sim", icon = icon("check-square-o"))),
menuItem(HTML("<b>Report:</b>"), tabName = "_report", icon = icon("file-text")),
menuItem(HTML("<b>Help:</b>"), tabName = "_support", icon = icon("life-buoy")),
menuItem(HTML("<b><font color=#ff0000>Close</font></b>"), tabName = "_intro", icon = icon("power-off"))
),
br(),
shiny::tags$button(
id = 'close',
type = "button",
class = "btn action-button", bgcolor = "#ff0000",
onclick = "setTimeout(function(){window.close();},500);",  # close browser
"Close")
),
######################################################################################
dashboardBody(
tabItems(
tabItem(tabName = "_intro",
shiny::h3("Flamingo"),
shiny::h4("Fluid Properties Uncertainty Analysis")),
tabItem(tabName = "_analogs", shiny::p("load data, map")),
#-------------------------------------------------------------------------------
tabItem(tabName = "_cluster", shiny::p("cluster analysis")),
#-------------------------------------------------------------------------------
tabItem(tabName = "_heatmap", shiny::p("Heat Map")),
#-------------------------------------------------------------------------------
tabItem(tabName = "_stats", p("Statistics"),
sidebarPanel(p("sidebar")),
mainPanel(p("mainpanel"))
),
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
tabItem(tabName = "_settings",
h4("Montecarlo Settings:"),
shiny::br(),
shiny::numericInput('nn', 'Number of runs:', 100, step = 1),
shiny::numericInput('ss', 'Set seed:', 1234, step = 1),
shiny::radioButtons("sampling_method", "Sampling Method", c("Latin Hypercube" = 0,
"Random" = 1), selected = 0),
shiny::radioButtons("corr_method", "Correlated  Variables:", c("Correlated" = 0,
"Uncorrelated)" = 1), selected = 0),
shiny::radioButtons("pt_method", "Pressure and Temperature calculation:",
c("Depth + Gradients" = 0, "Direct Pressure and Temperature" = 1), selected = 0),
shiny::sliderInput("lhs_accuracy", "LHS Accuracy level:", min = 0.01, max = 1, value = 0.05, step = 0.01),
shiny::radioButtons("fluid_corr_method", "Select type of analysis:",
c("Select one fluid correlation" = 0, "Fluid correlations sensitivity" = 1), selected = 0)
),
#-------------------------------------------------------------------------------
tabItem(tabName = "_definition",
tabsetPanel(
tabPanel("Variables",
shiny::numericInput('depth', "Reference Depth [ft.TVDss]:", 8000, step = 10),
shiny::checkboxInput("offshore", "Offshore:", FALSE),
shiny::numericInput('wd', "Water Depth [ft]", 1000, step = 1, min = 0),
shiny::tags$table(
shiny::tags$tr(
shiny::tags$td(shiny::h4("API")),
shiny::tags$td(shiny::selectInput("API_distro","", choices = list(
"normal", "truncated normal", "lognormal", "truncated lognormal", "uniform", "triangular", "fixed value"),
selected = "normal", width = 200)),
shiny::tags$td(shiny::numericInput('API_mean',"", 30, step = 0.5, min = 0.1, width = 100)),
shiny::tags$td(shiny::numericInput('API_sd', "", 1, step = 0.5, min = 0, width = 100)),
shiny::tags$td(shiny::numericInput('API_lower', "", 8, step = 0.5, min = 0, width = 100)),
shiny::tags$td(shiny::numericInput('API_upper', "", 69, step = 0.5, min = 1, width = 100))
),
shiny::tags$tr(
shiny::tags$td(shiny::h4("GOR [scf/stb]")),
shiny::tags$td(shiny::selectInput("GOR_distro","", choices = list(
"normal", "truncated normal", "lognormal", "truncated lognormal", "uniform", "triangular", "fixed value"),
selected = "normal", width = 200)),
shiny::tags$td(shiny::numericInput('GOR_mean',"", 250, step = 0.5, min = 0.1, width = 100)),
shiny::tags$td(shiny::numericInput('GOR_sd', "", 75, step = 0.5, min = 0, width = 100)),
shiny::tags$td(shiny::numericInput('GOR_lower', "", 10, step = 0.5, min = 0, width = 100)),
shiny::tags$td(shiny::numericInput('GOR_upper', "", 1000, step = 0.5, min = 1, width = 100))
),
shiny::tags$tr(
shiny::tags$td(shiny::h4("Depth Uncertainty [ft]")),
shiny::tags$td(shiny::selectInput("DEPT_err_distro","", choices = list(
"normal", "truncated normal", "lognormal", "truncated lognormal", "uniform", "triangular", "fixed value"),
selected = "normal", width = 200)),
shiny::tags$td(shiny::numericInput('DEPT_err_mean',"", 100, step = 5, min = 0, max = 500, width = 100)),
shiny::tags$td(shiny::numericInput('DEPT_err_sd', "", 25, step = 1, min = 0, max = 200, width = 100)),
shiny::tags$td(shiny::numericInput('DEPT_err_lower', "", 0, step = 5, min = 0, max = 500, width = 100)),
shiny::tags$td(shiny::numericInput('DEPT_err_upper', "", 500, step = 5, min = 1, max = 500, width = 100))
),
shiny::tags$tr(
shiny::tags$td(shiny::h4("Pressure Gradient [psi/ft]")),
shiny::tags$td(shiny::selectInput("grad_P_distro","", choices = list(
"normal", "truncated normal", "lognormal", "truncated lognormal", "uniform", "triangular", "fixed value"),
selected = "normal", width = 200)),
shiny::tags$td(shiny::numericInput('grad_P_mean',"", 0.45, step = 0.01, min = 0.3, max = 0.99, width = 100)),
shiny::tags$td(shiny::numericInput('grad_P_sd', "", 0.02, step = 0.005, min = 0, max = 0.1,width = 100)),
shiny::tags$td(shiny::numericInput('grad_P_lower', "", 0.3, step = 0.01, min = 0.3, width = 100)),
shiny::tags$td(shiny::numericInput('grad_P_upper', "", 0.99, step = 0.01, min = 0.3, width = 100))
),
shiny::tags$tr(
shiny::tags$td(shiny::h4("Temperature Gradient [F/100ft]")),
shiny::tags$td(shiny::selectInput("grad_T_distro","", choices = list(
"normal", "truncated normal", "lognormal", "truncated lognormal", "uniform", "triangular", "fixed value"),
selected = "normal", width = 200)),
shiny::tags$td(shiny::numericInput('grad_T_mean',"", 1.6, step = 0.05, min = 1.2, max = 3, width = 100)),
shiny::tags$td(shiny::numericInput('grad_T_sd', "", 0.2, step = 0.02, min = 0, width = 100)),
shiny::tags$td(shiny::numericInput('grad_T_lower', "", 1.2, step = 0.05, min = 0, width = 100)),
shiny::tags$td(shiny::numericInput('grad_T_upper', "", 3, step = 0.05, min = 1, width = 100))
)),
shiny::br(),
shiny::selectInput("fcorr_1", "Fluid Correlation:",
c("Glaso" = 0, "Standing" = 1, "Lasater" = 2, "VazquezBeggs" = 3,
"Petroskyetal" = 4, "AlMarhoun" = 5, "DeGhettoetalHeavyoil" = 6)),
shiny::tableOutput("stats_input")
),
tabPanel("Correlation",
shiny::br(),
shiny::numericInput('rr', 'API vs. GOR correlation coefficient:', 0.75, step = 0.05),
shiny::br(),
shiny::uiOutput("selectize_corr_var"),
shiny::br(),
shiny::plotOutput("pairs_input", height = 600)),
tabPanel("Histograms",
shiny::br(),
shiny::plotOutput("hist_apigor"),
shiny::plotOutput("hist_presstemp")),
tabPanel("P&T vs Depth",
shiny::br(),
shiny::plotOutput("depth_plot", height = 600))
)
),
#-------------------------------------------------------------------------------
tabItem(tabName = "_inputdata",
shiny::br(),
shiny::p("Data"),
shiny::br(),
shiny::downloadButton("aaa", label = "Download Results"),
DT::dataTableOutput("data_input")
),
#-------------------------------------------------------------------------------
tabItem(tabName = "_sim",
shiny::tags$button(
id = 'validate',
type = "button",
class = "btn action-button",
"Validate Data"),
shiny::br(),
shiny::br(),
shiny::tags$button(
id = 'run_mc',
type = "button",
class = "btn action-button",
"Lunch MonteCarlo"),
shiny::br(),
shiny::p("show results after runnning prosper")),
#-------------------------------------------------------------------------------
tabItem(tabName = "_report",
shiny::br(),
checkboxGroupInput("report_items", "Select Analysis to include in the report:",
c("Analogs", "MonteCarlo", "histograms", "P&T vs depth", "Correlations"),
selected = c("MonteCarlo", "histograms")),
shiny::tags$button(
id = 'edit_report',
type = "button",
class = "btn action-button",
"Edit Report"),
shiny::tags$button(
id = 'generate_report',
type = "button",
class = "btn action-button",
"Generate Report")
),
#-------------------------------------------------------------------------------
tabItem(tabName = "_support",
shiny::br(),
shiny::p("Help!!!!!!!!!!!!"),
shiny::br(),
shiny::h3("Analogs"),
shiny::br(),
shiny::br(),
shiny::h3("MonteCarlo"),
shiny::h4("Sampling Method"),
shiny::h5("Latin Hypercube assure a more uniform distribution of the points in the space.
Use it for a reduced number of realizations.
For a large number of realizations, it is recommended to use Random sampling."),
shiny::h4("Type of analysis"),
shiny::h5("The general purpose analysis is based on one fluid correlation. There is the option to run a
sensitivty on the different fluid correlations: the dataset is rebuilt sampling 25 realizations of the
orignal dataset, and this reduced dataset is run with each of the correlations."),
shiny::h4("Pressure and Temperature method"),
shiny::h5("Reservoir pressure and tenperature can be introduced directly or calculated from reservoir depth with
pressure and temperature gradients. The offshore option can be selcted.
Temperature ground level is fixed at 60F, at sea bottom is 39F (4ºC)")
)
)
)
)
)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
radiant:::radiant()
runApp('inst/shiny')
runApp('inst/shiny')
radiant:::radiant()
devtools::check()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("rhandsontable")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
aa <- readxl::read_excel("Workbook1.xlsx")
aa
write.table(aa, "distro_params_default.txt")
runApp('inst/shiny')
distroparam <- read.table("default/distro_params_default.txt")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
aa <- read.table("inst/shiny/www/default/distro_param_default.txt")
getwd()
devtools::load_all()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
system.file()
file.path()
file.path("ui.R")
filepath <- system.file(package = "Flamingo")
filepath
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
devtools::check()
runApp('inst/shiny')
install.packages("xlsx")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("rJava")
runApp('inst/shiny')
library(rJava)
library(rJava)
install.packages(c("ddalpha", "dplyr", "lava", "lme4", "rgeos"))
install.packages(c("backports", "checkmate", "colourpicker", "dplyr", "Rcpp"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
readxl::readxl_example()
readxl::readxl_example("clippy.xls")
readxl::readxl_example("datasets.xls")
aa <- data_frame(AA = rnomr(10),
BB = letters[1:10])
xlsx::write.xlsx(aa, "aaaa.xls", sheetName = "XX", col.names = TRUE, row.names = FALSE)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
system.file(package = "Flamingo")
devtools::install_github("ravenroadresources/Flamingo")
dp_user_path <- file.path(package_path, "shiny", "www", "default", "distro_params_user.txt")
package_path <- system.file(package = "Flamingo")
dp_user_path <- file.path(package_path, "shiny", "www", "default", "distro_params_user.txt")
dp_user_path
runApp('inst/shiny')
runApp('inst/shiny')
file.exists(dp_user_path)
runApp('inst/shiny')
runApp('inst/shiny')
aa <- write.table(c(1:3), "aa.txt")
write.table(c(1:3), "aa.txt")
runApp('inst/shiny')
runApp('inst/shiny')
shiny::runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
devtools::build()
devtools::load_all()
install.packages("xlsx")
devtools::load_all()
library(xlsx)
devtools::load_all()
devtools::load_all()
devtools::load_all()
Flamingo::run()
devtools::load_all()
Flamingo::run()
library(Flamingo)
Flamingo::run()
ui <- shinyUI(pageWithSidebar(
headerPanel("eventReactive and observeEvent"),
sidebarPanel(
actionButton("evReactiveButton", "eventReactive"),
br(),
actionButton("obsEventButton", "observeEvent"),
br(),
actionButton("evReactiveButton2", "eventReactive2")
),
mainPanel(
verbatimTextOutput("eText"),
verbatimTextOutput("oText")
)
))
server <- shinyServer(function(input, output) {
etext <- eventReactive(input$evReactiveButton, {
runif(1)
})
observeEvent(input$obsEventButton,{
output$oText <- renderText({ runif(1) })
})
eventReactive(input$evReactiveButton2,{
print("Will not print")
output$oText <- renderText({ runif(1) })
})
output$eText <- renderText({
etext()
})
})
shinyApp(ui=ui,server=server)
ui <- shinyUI(pageWithSidebar(
headerPanel("eventReactive and observeEvent"),
sidebarPanel(
actionButton("evReactiveButton", "event Reactive"),
br(),
actionButton("obsEventButton", "observe Event"),
br(),
actionButton("evReactiveButton2", "event Reactive2")
),
mainPanel(
verbatimTextOutput("eText"),
verbatimTextOutput("oText")
)
))
server <- shinyServer(function(input, output) {
etext <- eventReactive(input$evReactiveButton, {
runif(1)
})
observeEvent(input$obsEventButton,{
output$oText <- renderText({ runif(1) })
})
eventReactive(input$evReactiveButton2,{
print("Will not print")
output$oText <- renderText({ runif(1) })
})
output$eText <- renderText({
etext()
})
})
shinyApp(ui=ui,server=server)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("openxlsx")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
vignette("Introduction", package = "openxlsx")
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
devtools::check()
devtools::check()
devtools::build()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
